// This file is auto-generated by @hey-api/openapi-ts

export const BackgroundSchema = {
    properties: {
        id: {
            type: 'string',
            title: 'Id'
        },
        name: {
            type: 'string',
            title: 'Name'
        },
        avatar: {
            type: 'string',
            title: 'Avatar'
        },
        preview_images: {
            items: {
                type: 'string'
            },
            type: 'array',
            title: 'Preview Images'
        },
        category: {
            type: 'string',
            title: 'Category'
        }
    },
    type: 'object',
    required: ['id', 'name', 'avatar', 'preview_images', 'category'],
    title: 'Background'
} as const;

export const Body_createBackgroundSchema = {
    properties: {
        name: {
            type: 'string',
            title: 'Name'
        },
        avatar: {
            type: 'string',
            format: 'binary',
            title: 'Avatar'
        },
        preview_images: {
            items: {
                type: 'string',
                format: 'binary'
            },
            type: 'array',
            title: 'Preview Images'
        },
        category: {
            type: 'string',
            title: 'Category'
        }
    },
    type: 'object',
    required: ['name', 'avatar', 'preview_images', 'category'],
    title: 'Body_createBackground'
} as const;

export const Body_createModelSchema = {
    properties: {
        name: {
            type: 'string',
            title: 'Name'
        },
        avatar: {
            type: 'string',
            format: 'binary',
            title: 'Avatar'
        },
        preview_images: {
            items: {
                type: 'string',
                format: 'binary'
            },
            type: 'array',
            title: 'Preview Images'
        },
        gender: {
            type: 'string',
            enum: ['MALE', 'FEMALE'],
            title: 'Gender'
        },
        age_group: {
            type: 'string',
            enum: ['TWENTIES', 'THIRTIES', 'FORTIES', 'FIFTIES', 'SIXTIES', 'SEVENTIES', 'EIGHTIES'],
            title: 'Age Group'
        }
    },
    type: 'object',
    required: ['name', 'avatar', 'preview_images', 'gender', 'age_group'],
    title: 'Body_createModel'
} as const;

export const Body_createPoseSchema = {
    properties: {
        image: {
            type: 'string',
            format: 'binary',
            title: 'Image'
        },
        gender: {
            type: 'string',
            title: 'Gender'
        }
    },
    type: 'object',
    required: ['image', 'gender'],
    title: 'Body_createPose'
} as const;

export const Body_createProductSchema = {
    properties: {
        name: {
            type: 'string',
            title: 'Name'
        },
        preview_image: {
            type: 'string',
            format: 'binary',
            title: 'Preview Image'
        },
        images: {
            items: {
                type: 'string',
                format: 'binary'
            },
            type: 'array',
            title: 'Images'
        }
    },
    type: 'object',
    required: ['name', 'preview_image', 'images'],
    title: 'Body_createProduct'
} as const;

export const HTTPValidationErrorSchema = {
    properties: {
        detail: {
            items: {
                '$ref': '#/components/schemas/ValidationError'
            },
            type: 'array',
            title: 'Detail'
        }
    },
    type: 'object',
    title: 'HTTPValidationError'
} as const;

export const ModelSchema = {
    properties: {
        id: {
            type: 'string',
            title: 'Id'
        },
        name: {
            type: 'string',
            title: 'Name'
        },
        avatar: {
            type: 'string',
            title: 'Avatar'
        },
        preview_images: {
            items: {
                type: 'string'
            },
            type: 'array',
            title: 'Preview Images'
        },
        gender: {
            type: 'string',
            enum: ['MALE', 'FEMALE'],
            title: 'Gender'
        },
        age_group: {
            type: 'string',
            enum: ['TWENTIES', 'THIRTIES', 'FORTIES', 'FIFTIES', 'SIXTIES', 'SEVENTIES', 'EIGHTIES'],
            title: 'Age Group'
        }
    },
    type: 'object',
    required: ['id', 'name', 'avatar', 'preview_images', 'gender', 'age_group'],
    title: 'Model'
} as const;

export const PoseSchema = {
    properties: {
        id: {
            type: 'string',
            title: 'Id'
        },
        image: {
            type: 'string',
            title: 'Image'
        },
        gender: {
            type: 'string',
            enum: ['MALE', 'FEMALE'],
            title: 'Gender'
        }
    },
    type: 'object',
    required: ['id', 'image', 'gender'],
    title: 'Pose'
} as const;

export const ProductSchema = {
    properties: {
        id: {
            type: 'string',
            title: 'Id'
        },
        name: {
            type: 'string',
            title: 'Name'
        },
        preview_image: {
            type: 'string',
            title: 'Preview Image'
        },
        images: {
            items: {
                type: 'string'
            },
            type: 'array',
            title: 'Images'
        }
    },
    type: 'object',
    required: ['id', 'name', 'preview_image', 'images'],
    title: 'Product'
} as const;

export const ValidationErrorSchema = {
    properties: {
        loc: {
            items: {
                anyOf: [
                    {
                        type: 'string'
                    },
                    {
                        type: 'integer'
                    }
                ]
            },
            type: 'array',
            title: 'Location'
        },
        msg: {
            type: 'string',
            title: 'Message'
        },
        type: {
            type: 'string',
            title: 'Error Type'
        }
    },
    type: 'object',
    required: ['loc', 'msg', 'type'],
    title: 'ValidationError'
} as const;